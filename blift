vector<ll>adj[50005];
    ll up[50005][21];
ll lvl[50005];
    void blift(ll node,ll papa,ll curr){
        up[node][0]=papa;
         lvl[node]=curr;
        for(ll i=1;i<=20;i++){
            if(up[node][i-1]!=-1){
                up[node][i]=up[up[node][i-1]][i-1];
            }
            else{
                up[node][i]=-1;
            }
        }
        for(ll i:adj[node]){
            if(i==papa){
                continue;
            }
            blift(i,node,curr+1);
        }
        return;
    }
ll ancestor(ll node, ll k) {
        ll curr=node;
        for(ll i=20;i>=0;i--){
            ll idhar=1<<i;
            if(idhar&k){
                if(curr!=-1){
                    curr=up[curr][i];
            }
        }
}
        return curr;
    }
ll lca(ll node1,ll node2){
        if(lvl[node1]>=lvl[node2]){
          swap(node1,node2);
        }
          node2=ancestor(node2,lvl[node2]-lvl[node1]);
            if(node1==node2){
              return node1;
            }
        for(ll i=20;i>=0;i--){
            if(up[node1][i]!=up[node2][i]){
                curr1=up[node1][i];
                curr2=up[node2][i];
            }
        }
        return up[node1][0];
    }
//call blift(0,-1) if 0 is root in main function and adjust bits accordingly if 30 
